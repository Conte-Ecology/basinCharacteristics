if( is.null(pcnts) ){
pcnts <- under
}else ( pcnts <- rbind(pcnts, under))
rownames(pcnts)[m] <- paste0("Under ", comparePcnts[m])
}
m
pcnts
rownames(pcnts)
#x <- table(is.na(toHist))
comparePcnts <- c(100, 95, 90, 0)
pcnts <- NULL
for( m in comparePcnts){
if (m != 0){
under <- apply(toHist,2, function(x) {length(which(x < m) == TRUE)})/nrow(toHist)*100
}else{
under <- apply(toHist,2, function(x) {length(which(x == m) == TRUE)})/nrow(toHist)*100
}
if( is.null(pcnts) ){
pcnts <- under
}else ( pcnts <- rbind(pcnts, under))
}
rownames(pcnts) <- paste0(comparePcnts, "%")
pcnts
trimHist2 <- ggplot(toHist_melt,aes(x=value)) +
geom_histogram(binwidth = 0.5) +
coord_cartesian(ylim = c(0, 1200)) +
facet_wrap(~variable)
trimHist2
trimHist
rawHist
trimHist <- ggplot(toHist_melt,aes(x=value)) +
geom_histogram(binwidth = 0.5) +
coord_cartesian(ylim = c(0, 10000)) +
facet_wrap(~variable)
trimHist
trimHist2 <- ggplot(toHist_melt,aes(x=value)) +
geom_histogram(binwidth = 0.5) +
coord_cartesian(ylim = c(0, 1000)) +
facet_wrap(~variable)
rawHist
trimHist <- ggplot(toHist_melt,aes(x=value)) +
geom_histogram(binwidth = 0.5) +
coord_cartesian(ylim = c(0, 10000)) +
facet_wrap(~variable)
trimHist
trimHist2 <- ggplot(toHist_melt,aes(x=value)) +
geom_histogram(binwidth = 0.5) +
coord_cartesian(ylim = c(0, 1000)) +
facet_wrap(~variable)
trimHist2
pcnts
toMin <- allPcnts[,c(1, which(names(allPcnts) %in% VARS))]
head(toMin)
group_by(toMin, FEATUREID) %>%
mutate(MIN = min())
out <- group_by(toMin, FEATUREID) %>%
mutate(MIN = min())
warnings()
names(toMin)
out <- group_by(toMin, FEATUREID) %>%
mutate(MIN = min(agriculture, fwswetlands, surfcoarse, elev_nalcc))
head(out)
trimHist2 <- ggplot(out,aes(x=MIN)) +
geom_histogram(binwidth = 0.5) +
coord_cartesian(ylim = c(0, 1000))
ggplot(out,aes(x=MIN)) +
geom_histogram(binwidth = 0.5) +
coord_cartesian(ylim = c(0, 1000))
allMissing <- ggplot(out,aes(x=MIN)) +
geom_histogram(binwidth = 0.5) +
coord_cartesian(ylim = c(0, 10000))
allMissing
names(out) <- c('NLCD', 'FWS_Wetlands', 'SSURGO', 'NALCC_Elevation', 'All_Catchments')
comparePcnts <- c(100, 95, 90, 0)
pcnts <- NULL
for( m in comparePcnts){
if (m != 0){
under <- apply(toHist,2, function(x) {length(which(x < m) == TRUE)})/nrow(toHist)*100
}else{
under <- apply(toHist,2, function(x) {length(which(x == m) == TRUE)})/nrow(toHist)*100
}
if( is.null(pcnts) ){
pcnts <- under
}else ( pcnts <- rbind(pcnts, under))
}
rownames(pcnts) <- paste0(comparePcnts, "%")
pcnts
comparePcnts <- c(100, 95, 90, 0)
pcnts <- NULL
for( m in comparePcnts){
if (m != 0){
under <- apply(out,2, function(x) {length(which(x < m) == TRUE)})/nrow(out)*100
}else{
under <- apply(out,2, function(x) {length(which(x == m) == TRUE)})/nrow(out)*100
}
if( is.null(pcnts) ){
pcnts <- under
}else ( pcnts <- rbind(pcnts, under))
}
rownames(pcnts) <- paste0(comparePcnts, "%")
pcnts
head(out)
out
out <- group_by(toMin, FEATUREID) %>%
mutate(MIN = min(agriculture, fwswetlands, surfcoarse, elev_nalcc))%>%
ungroup()
allMissing <- ggplot(out,aes(x=MIN)) +
geom_histogram(binwidth = 0.5) +
coord_cartesian(ylim = c(0, 10000))
allMissing
head(out)
outTable <- out[,-1]
#x <- table(is.na(toHist))
comparePcnts <- c(100, 95, 90, 0)
pcnts <- NULL
for( m in comparePcnts){
if (m != 0){
under <- apply(outTable,2, function(x) {length(which(x < m) == TRUE)})/nrow(outTable)*100
}else{
under <- apply(outTable,2, function(x) {length(which(x == m) == TRUE)})/nrow(outTable)*100
}
if( is.null(pcnts) ){
pcnts <- under
}else ( pcnts <- rbind(pcnts, under))
}
rownames(pcnts) <- paste0(comparePcnts, "%")
pcnts
names(out) <- c('FEATUREID', 'NLCD', 'FWS_Wetlands', 'SSURGO', 'NALCC_Elevation', 'All_Catchments')
outTable <- out[,-1]
head(outTable)
#x <- table(is.na(toHist))
comparePcnts <- c(100, 95, 90, 0)
pcnts <- NULL
for( m in comparePcnts){
if (m != 0){
under <- apply(outTable,2, function(x) {length(which(x < m) == TRUE)})/nrow(outTable)*100
}else{
under <- apply(outTable,2, function(x) {length(which(x == m) == TRUE)})/nrow(outTable)*100
}
if( is.null(pcnts) ){
pcnts <- under
}else ( pcnts <- rbind(pcnts, under))
}
rownames(pcnts) <- paste0(comparePcnts, "%")
pcnts
comparePcnts <- c(100, 95, 90, 50)
pcnts <- apply(outTable,2, function(x) {length(which(x == 100) == TRUE)})/nrow(outTable)*100
pcnts
for( m in comparePcnts){
under <- apply(outTable,2, function(x) {length(which(x < m) == TRUE)})/nrow(outTable)*100
rbind(pcnts, under))
}
for( m in comparePcnts){
under <- apply(outTable,2, function(x) {length(which(x < m) == TRUE)})/nrow(outTable)*100
rbind(pcnts, under)
}
pcnts <- rbind(pcnts, apply(outTable,2, function(x) {length(which(x == 0) == TRUE)})/nrow(outTable)*100)
c("100%", paste0(comparePcnts, "%"), "0%")
c("100%", paste0("Less than ", comparePcnts, "%"), "0%")
rownames(pcnts) <- c("100%", paste0("Less than ", comparePcnts, "%"), "0%")
c("100%", paste0("Less than ", comparePcnts, "%"), "0%")
dim(pcnts)
head(pcnts)
comparePcnts <- c(100, 95, 90, 50)
pcnts <- apply(outTable,2, function(x) {length(which(x == 100) == TRUE)})/nrow(outTable)*100
pcnts
comparePcnts <- c(100, 95, 90, 50)
for( m in comparePcnts){
under <- apply(outTable,2, function(x) {length(which(x < m) == TRUE)})/nrow(outTable)*100
pcnts <- rbind(pcnts, under)
}
pcnts <- rbind(pcnts, apply(outTable,2, function(x) {length(which(x == 0) == TRUE)})/nrow(outTable)*100)
rownames(pcnts) <- c("100%", paste0("Less than ", comparePcnts, "%"), "0%")
pcnts
rm(list=ls())
# ==============
# Load libraries
# ==============
library(reshape2)
library(foreign)
library(tcltk)
library(dplyr)
library(lazyeval)
#=======================
# Set the Base Directory
#=======================
baseDirectory <- 'C:/KPONEIL/GitHub/projects/basinCharacteristics/zonalStatistics'
# ==========
# Load files
# ==========
# User inputs
# -----------
source( file.path(baseDirectory, "scripts", "INPUTS.txt") )
rasterList <- c(discreteRasters, continuousRasters)
# Delineated catchments
# ---------------------
load(file.path(baseDirectory, "versions", outputName, paste0(outputName, "_delineatedCatchments.RData")))
# Delineated catchments
# ---------------------
load(file.path(baseDirectory, "versions", outputName, paste0(outputName, "_delineatedCatchments.RData")))
# ==============
# Drainage Areas
# ==============
# The areas based on the vectors are saved as the areas, though the raster areas are used to define the percentage of area with data.
#   These areas match up with the data layers which
# Vector
# ------
# Input file
vectorFile <- file.path(baseDirectory, 'gisFiles/vectors', paste0(catchmentsFileName, '.dbf'))
# Output filepath (local)
areaFileLocal <- file.path(baseDirectory, "versions", outputName, "rTables", paste0("local_AreaSqKM.csv"))
# If the area file doesn't exist, write it. Else load it.
if ( !file.exists(areaFileLocal) ){
# Read the catchment attributes
vectorArea <- read.dbf(vectorFile)[,c(zoneField, "AreaSqKM")]
# Save file
write.csv(vectorArea, file = areaFileLocal, row.names = F)
} else {vectorArea <- read.csv(areaFileLocal)}
# Raster
# ------
rasterArea <- read.dbf(file.path(baseDirectory,"versions", outputName, "gisTables/catRasterAreas.dbf"))[,c(zoneField, "AREASQKM")]
names(rasterArea)[2] <- "AreaSqKM"
# ========================
# Process local statistics
# ========================
# Loop through layers, reading files.
for (j in 1:length(rasterList)){
# File path to table
tableFilePath <- file.path(baseDirectory,"versions", outputName, "gisTables", paste0(rasterList[j], "_", statType, ".dbf"))
# Open table
dbfTable <-read.dbf(tableFilePath)[,c(zoneField, statType, "AREA")]
dbfTable$AREA <- dbfTable$AREA*0.000001 # convert to square kilometers
dbfTable[which(dbfTable[,statType] == -9999), statType] <- NA # Replace all "-9999" values with "NA"
# Output filepath
outputTable <- file.path(baseDirectory, "versions", outputName, "rTables", paste0("local_", rasterList[j], "_", statType, ".csv"))
if ( !file.exists(outputTable) ){
# Calculate the % of the catchment area with data and include in the output
gisStat <- left_join(dbfTable, rasterArea, by = zoneField) %>%
mutate(percentAreaWithData = AREA/AreaSqKM*100)%>%
select(-c(AREA, AreaSqKM))
# save this as a file
write.csv(gisStat, file = outputTable, row.names = F)
}
# Prep dataframes for upstream averaging
# --------------------------------------
# Data
dat <- dbfTable[,c(zoneField, statType)]
names(dat)[2] <- rasterList[j]
if ( j == 1 ) { zonalData <- dat } else( zonalData <- left_join(zonalData, dat, by = zoneField))
# Areas
wt <- dbfTable[,c(zoneField, "AREA")]
names(wt)[2] <- rasterList[j]
if ( j == 1 ) { zonalAreas <- wt } else( zonalAreas <- left_join(zonalAreas, wt, by = zoneField))
}
# ===========================
# Process upstream statistics
# ===========================
# Define features to compute
featureList <- zonalData[,zoneField]
# Define storage dataframes
# -------------------------
# Upstream stats
upstreamStats <- data.frame(matrix(NA, nrow = length(featureList), ncol = length(rasterList) + 1))
names(upstreamStats) <- c(zoneField, rasterList)
# Areas with data
pcntUpstreamWithData <- data.frame(matrix(NA, nrow = length(featureList), ncol = length(rasterList) + 1))
names(pcntUpstreamWithData) <- c(zoneField, rasterList)
# Upstream area (from vector)
areaFileUpstream <- file.path(baseDirectory, "versions", outputName, "rTables", paste0("upstream_AreaSqKM.csv"))
# If Upstream area file doesn't exist, calculate it based on the vectors
if ( !file.exists(areaFileUpstream) ){
upstreamArea <- data.frame(matrix(NA, nrow = length(featureList), ncol = 2))
names(upstreamArea) <- c(zoneField, "AreaSqKM")
}
# Catchments loop
# ---------------
progressBar <- tkProgressBar(title = "progress bar", min = 0, max = length(featureList), width = 300)
for ( m in seq_along(featureList)){
# Get features in current basin
features <- delineatedCatchments[[which(names(delineatedCatchments) == featureList[m])]]
# Sum the areas of the individual catchments in the basin (raster version)
TotDASqKM <- sum(filter_(rasterArea, interp(~col %in% features, col = as.name(zoneField)))$AreaSqKM)
# Get individual catchment stats for current basin
catchStats <- filter_(zonalData, interp(~col %in% features, col = as.name(zoneField)))#%>%
# Get individual catchment areas with data for current basin
catchAreas <- filter_(zonalAreas, interp(~col %in% features, col = as.name(zoneField)))#%>%
# Calculate the weights of each element in the dataframe (creates a matching dataframe)
weights <- sweep(catchAreas, 2, colSums(catchAreas), `/`)
# Sum the weighted stats to get final values
outStats <- colSums(catchStats*weights, na.rm = T)
# Get the percentage of catchment area with data
outAreas <- colSums(catchAreas)/TotDASqKM
# Account for the rare case of catchments area = 0 (product of rasterizing catchments polygons)
if (TotDASqKM == 0) {
outStats[2:length(outStats)] <- NA
outAreas[2:length(outAreas)] <- 0
}
# Upstream stats
upstreamStats[m,1]                     <- featureList[m]
upstreamStats[m,2:ncol(upstreamStats)] <- outStats[-1]
# Area with data
pcntUpstreamWithData[m,1]                     <- featureList[m]
pcntUpstreamWithData[m,2:ncol(upstreamStats)] <- outAreas[-1]
# Total drainage area
# -------------------
# This is calculated based on the vector file
if ( !file.exists(areaFileUpstream) ){
upstreamArea[m,1] <- featureList[m]
upstreamArea[m,2] <- sum(filter_(vectorArea, interp(~col %in% features, col = as.name(zoneField)))$AreaSqKM, na.rm = T)
}
# Progress bar update
setTkProgressBar(progressBar, m, label=paste( round(m/length(featureList)*100, 2), "% done"))
}
close(progressBar)
# Output upstream statistics tables
# ---------------------------------
# Loop through variables writing tables with upstream data and the percent of the area with data
for ( n in 2:(ncol(upstreamStats))){
# Name
colName <- names(upstreamStats)[n]
# Output dataframe
upStat <- upstreamStats[,c(zoneField, colName)]
names(upStat)[2] <- statType
upPcnt <- pcntUpstreamWithData[,c(zoneField, colName)]
upPcnt[,2] <- upPcnt[,2]*100
names(upPcnt)[2] <- "percentAreaWithData"
up <- left_join(upStat, upPcnt, by = zoneField)
outputUpstream  <- file.path(baseDirectory, "versions", outputName, "rTables", paste0("upstream_", colName, "_", statType, ".csv"))
write.csv(up, file = outputUpstream,  row.names = F)
}
# Save area file
if ( !file.exists(areaFileUpstream) ){
write.csv(upstreamArea, file = areaFileUpstream, row.names = F)
}
seq_along(rasterList)
rm(list=ls())
library(dplyr)
rasterList <- c("forest", "agriculture", "impervious", "fwswetlands", "fwsopenwater", "slope_pcnt", "elevation", "surfcoarse", "percent_sandy", "drainclass", "hydrogroup_ab")
tableFolder <- "C:/KPONEIL/GitHub/projects/basinCharacteristics/zonalStatistics/versions/pointDelineation/gisTables"
rasterData <- NULL
zoneField <- "DelinID"
rasterData <- NULL
for (r in seq_along(rasterList)){
inTable <- read.dbf(file.path(tableFolder, paste0(rasterList[r], ".dbf"))))
if( is.null(rasterData)){rasterData <- inTable} else(rasterData <- left_join(rasterData, inTable, ))
}
is.null(rasterData)
for (r in seq_along(rasterList)){
inTable <- read.dbf(file.path(tableFolder, paste0(rasterList[r], ".dbf")))
if(is.null(rasterData)){rasterData <- inTable} else(rasterData <- left_join(rasterData, inTable, ))
}
library(foreign)
rasterData <- NULL
for (r in seq_along(rasterList)){
inTable <- read.dbf(file.path(tableFolder, paste0(rasterList[r], ".dbf")))
if(is.null(rasterData)){rasterData <- inTable} else(rasterData <- left_join(rasterData, inTable, ))
}
rasterData <- NULL
for (r in seq_along(rasterList)){
inTable <- read.dbf(file.path(tableFolder, paste0(rasterList[r], ".dbf")))
if(is.null(rasterData)){rasterData <- inTable} else(rasterData <- left_join(rasterData, inTable, zoneField))
}
paste0(rasterList[r], ".dbf")
rasterList <- c("forest", "agriculture", "impervious", "fwswetlands", "fwsopenwater", "slope_pcnt", "elevation", "surfcoarse", "percent_sandy", "drainageclass", "hydrogroup_ab")
# Rasters
# -------
rasterData <- NULL
for (r in seq_along(rasterList)){
inTable <- read.dbf(file.path(tableFolder, paste0(rasterList[r], ".dbf")))
if(is.null(rasterData)){rasterData <- inTable} else(rasterData <- left_join(rasterData, inTable, zoneField))
}
head(rasterData)
catchmentsFilePath <- "C:/KPONEIL/delineation/northeast/pointDelineation/outputFiles/delin_basins_deerfield_2_17_2015.shp"
shapeAttributes <- read.dbf(catchmentsFilePath)
catchmentsFilePath <- "C:/KPONEIL/delineation/northeast/pointDelineation/outputFiles/delin_basins_deerfield_2_17_2015.dbf"
shapeAttributes <- read.dbf(catchmentsFilePath)
head(shapeAttributes)
dim(shapeAttributes)
dim(rasterData)
areas <- read.dbf(catchmentsFilePath)[,c(zoneField, "AreaSqKM")]
head(areas)
areas[areas$DelinID == 100000,]
areas[areas$DelinID == 100058,]
j = 1
tableFilePath <- read.dbf(file.path(tableFolder, paste0(rasterList[j], ".dbf")))
dbfTable <-read.dbf(tableFilePath)[,c(zoneField, statType, "AREA")]
tableFilePath <- file.path(tableFolder, paste0(rasterList[j], ".dbf"))
dbfTable <-read.dbf(tableFilePath)[,c(zoneField, statType, "AREA")]
head(inTable)
statType = "MEAN"
dbfTable <-read.dbf(tableFilePath)[,c(zoneField, statType, "AREA")]
dbfTable
head(dbfTable)
dbfTable$AREA <- dbfTable$AREA*0.000001 # convert to square kilometers
dbfTable[which(dbfTable[,statType] == -9999), statType] <- NA # Replace all "-9999" values with "NA"
baseDirectory <- 'C:/KPONEIL/GitHub/projects/basinCharacteristics/zonalStatistics'
outputName <- "pointDelineation"
file.path(baseDirectory, "versions", outputName, "rTables", paste0("local_", rasterList[j], "_", statType, ".csv"))
file.path(baseDirectory, "versions", outputName, "rTables", paste0(rasterList[j], "_", statType, ".csv"))
shapeAreas <- read.dbf(catchmentsFilePath)[,c(zoneField, "AreaSqKM")]
j = 1
tableFilePath <- file.path(tableFolder, paste0(rasterList[j], ".dbf"))
# Open table
dbfTable <-read.dbf(tableFilePath)[,c(zoneField, statType, "AREA")]
dbfTable$AREA <- dbfTable$AREA*0.000001 # convert to square kilometers
dbfTable[which(dbfTable[,statType] == -9999), statType] <- NA # Replace all "-9999" values with "NA"
# Output filepath
outputTable <- file.path(baseDirectory, "versions", outputName, "rTables", paste0(rasterList[j], "_", statType, ".csv"))
!file.exists(outputTable)
gisStat <- left_join(dbfTable, shapeAreas, by = zoneField) %>%
mutate(percentAreaWithData = AREA/AreaSqKM*100)%>%
select(-c(AREA, AreaSqKM))
head(gisStat)
range(gisStat$percentAreaWithData)
rasterList[j]
hist(range(gisStat$percentAreaWithData))
gisStat
hist(gisStat$percentAreaWithData)
hist(gisStat$percentAreaWithData)
?hist
hist(gisStat$percentAreaWithData, breaks = 100)
min(gisStat$percentAreaWithData)
head(gisStat)
gisStat[which(gisStat$percentAreaWithData < 50),]
statType
names(gisStat)[which(names(gisStat) == statType)]
rasterList[j]
conversionValues <- c(     100,           100,            1,           100,            100,            1,           1,          100,             100,               1,             100)
outData <- gisStat[,c(zoneField, statType)]
head(outData)
names(outData)[which(names(outData) == statType)] <- rasterList[j]
head(outData)
percentAreasWithData <- gisStat[,c(zoneField, "percentAreaWithData")]
names(percentAreasWithData)[which(names(percentAreasWithData) ==  "percentAreaWithData")] <- rasterList[j]
head(percentAreasWithData)
outData[ ,rasterList[j]] <- outData[ ,rasterList[j]]*conversionValues[j]
head(outData)
c(zoneField, rasterList[j], paste0("percentAreaWithData_", rasterList[j])
)
head(gisData)
gisStat
head(gisStat)
pointDelineationStats <- NULL
# Loop through layers, reading files.
for (j in seq_along(rasterList)){
# File path to table
tableFilePath <- file.path(tableFolder, paste0(rasterList[j], ".dbf"))
# Open table
dbfTable <-read.dbf(tableFilePath)[,c(zoneField, statType, "AREA")]
dbfTable$AREA <- dbfTable$AREA*0.000001 # convert to square kilometers
dbfTable[which(dbfTable[,statType] == -9999), statType] <- NA # Replace all "-9999" values with "NA"
# Output filepath
outputTable <- file.path(baseDirectory, "versions", outputName, "rTables", paste0(rasterList[j], "_", statType, ".csv"))
if ( !file.exists(outputTable) ){
# Calculate the % of the catchment area with data and include in the output
gisStat <- left_join(dbfTable, shapeAreas, by = zoneField) %>%
mutate(percentAreaWithData = AREA/AreaSqKM*100)%>%
select(-c(AREA, AreaSqKM))
# save this as a file
write.csv(gisStat, file = outputTable, row.names = F)
} else (gisStat <- read.dbf(outputTable))
names(gisStat) <- c(zoneField, rasterList[j], paste0(rasterList[j]"_percentAreaWithData")
if(is.null(pointDelineationStats)){pointDelineationStats <- gisStat} else(pointDelineationStats <- left_join(pointDelineationStats, gisStat, zoneField))
}
c(zoneField, rasterList[j], paste0(rasterList[j], "_percentAreaWithData")
)
pointDelineationStats <- NULL
# Loop through layers, reading files.
for (j in seq_along(rasterList)){
# File path to table
tableFilePath <- file.path(tableFolder, paste0(rasterList[j], ".dbf"))
# Open table
dbfTable <-read.dbf(tableFilePath)[,c(zoneField, statType, "AREA")]
dbfTable$AREA <- dbfTable$AREA*0.000001 # convert to square kilometers
dbfTable[which(dbfTable[,statType] == -9999), statType] <- NA # Replace all "-9999" values with "NA"
# Output filepath
outputTable <- file.path(baseDirectory, "versions", outputName, "rTables", paste0(rasterList[j], "_", statType, ".csv"))
if ( !file.exists(outputTable) ){
# Calculate the % of the catchment area with data and include in the output
gisStat <- left_join(dbfTable, shapeAreas, by = zoneField) %>%
mutate(percentAreaWithData = AREA/AreaSqKM*100)%>%
select(-c(AREA, AreaSqKM))
# save this as a file
write.csv(gisStat, file = outputTable, row.names = F)
} else (gisStat <- read.dbf(outputTable))
names(gisStat) <- c(zoneField, rasterList[j], paste0(rasterList[j], "_percentAreaWithData"))
if(is.null(pointDelineationStats)){pointDelineationStats <- gisStat} else(pointDelineationStats <- left_join(pointDelineationStats, gisStat, zoneField))
}
head(pointDelineationStats)
pointDelineationStats <- shapeAreas
# Loop through layers, reading files.
for (j in seq_along(rasterList)){
# File path to table
tableFilePath <- file.path(tableFolder, paste0(rasterList[j], ".dbf"))
# Open table
dbfTable <-read.dbf(tableFilePath)[,c(zoneField, statType, "AREA")]
dbfTable$AREA <- dbfTable$AREA*0.000001 # convert to square kilometers
dbfTable[which(dbfTable[,statType] == -9999), statType] <- NA # Replace all "-9999" values with "NA"
# Output filepath
outputTable <- file.path(baseDirectory, "versions", outputName, "rTables", paste0(rasterList[j], "_", statType, ".csv"))
if ( !file.exists(outputTable) ){
# Calculate the % of the catchment area with data and include in the output
gisStat <- left_join(dbfTable, shapeAreas, by = zoneField) %>%
mutate(percentAreaWithData = AREA/AreaSqKM*100)%>%
select(-c(AREA, AreaSqKM))
# save this as a file
write.csv(gisStat, file = outputTable, row.names = F)
} else (gisStat <- read.dbf(outputTable))
names(gisStat) <- c(zoneField, rasterList[j], paste0(rasterList[j], "_percentAreaWithData"))
if(is.null(pointDelineationStats)){pointDelineationStats <- gisStat} else(pointDelineationStats <- left_join(pointDelineationStats, gisStat, zoneField))
}
r
