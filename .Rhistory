# ======
# Inputs
# ======
baseDirectory <- 'C:/KPONEIL/GitHub/projects/basinCharacteristics/zonalStatistics'
# There are 3 options for specifying the variables to output:
#   1) "ALL" will include all of the variables present in the folder
#   2) NULL will include the variables from the "rasterList" object in the "RB_INPUTS.txt" file
#   3) Manually list the variables to output (do not include the buffer specification)
outputVariables <- c("ALL")
# ========================
# Read user-defined inputs
# ========================
source( file.path(baseDirectory, "scripts", "RB_INPUTS.txt") )
# ==================
# Conversion Factors
# ==================
# Read the conversion factors file
setwd(baseDirectory); setwd('..')
conversionFactors <- read.csv("Covariate Data Status - High Res Delineation.csv")[,c("Name", "Conversion.Factor")]
# Rename columns
names(conversionFactors) <- c("variable", "factor")
# Include the bufferID
conversionFactors$variable <- paste0(conversionFactors$variable , "_", bufferID)
# ======================
# Group stats for output
# ======================
# Set the directory where the tables are located
rTablesDirectory <- file.path(baseDirectory, "versions", outputName, "rTables")
if(is.null(outputVariables)){outputVariables <- rasterList}
# Local
# -----
# Create list of variables to compile
if ( all(outputVariables %in% "ALL" == TRUE) ){
localStatFiles <- list.files(path = rTablesDirectory, pattern = paste0("^local_.*_", bufferID,".csv$"))
}else{
localStatFiles <- c()
outputVariables <- paste0(outputVariables, "_", bufferID)
for( LF in seq_along(outputVariables) ){
localStatFiles <- c(localStatFiles, list.files(path = rTablesDirectory, pattern = paste0("local_",outputVariables[LF] ) ) )
}
}
# Loop through files. Pull data and join together for output.
for ( L in seq_along(localStatFiles) ){
# Print status
print(L)
# Read the CSV
localTemp <- read.csv(file.path(rTablesDirectory, localStatFiles[L]) )
# Get file name
A <- gsub("*local_", "", localStatFiles[L])
variableName <- gsub(paste0("*.csv"), "", A)
# Rename the columns
names(localTemp) <- c(zoneField, variableName)
# Pull the variable specifc factor
factor <- filter(conversionFactors, variable == variableName)%>%
select(factor)
# Account for missing factors
if(is.na(as.numeric(factor))) {
print(paste0("Factor missing for '", variableName, "'. Assigning a default factor of 1."))
factor <- 1
}
# Multiply the raw variable value by the conversion factor
localTemp[,names(localTemp) == variableName] <- localTemp[,names(localTemp) == variableName]*as.numeric(factor)
# Join to main dataframe
if( L == 1) {LocalStats <- localTemp} else(LocalStats <- left_join(LocalStats, localTemp, by = zoneField) )
}
# Upstream
# --------
# Create list of variables to compile
if ( all(outputVariables %in% "ALL" == TRUE) ){
upstreamStatFiles <- list.files(path = rTablesDirectory, pattern = paste0("^upstream_.*_", bufferID,".csv$"))
}else{
upstreamStatFiles <- c()
for( UF in seq_along(outputVariables) ){
upstreamStatFiles <- c(upstreamStatFiles, list.files(path = rTablesDirectory, pattern = paste0("upstream_",outputVariables[UF] ) ) )
}
}
# Loop through files. Pull data and join together for output.
for ( U in 1:length(upstreamStatFiles) ){
# Print status
print(U)
# Read the CSV
upstreamTemp <- read.csv(file.path(rTablesDirectory, upstreamStatFiles[U]) )
# Get file name
A <- gsub("*upstream_", "", upstreamStatFiles[U])
variableName <- gsub(paste0("*.csv"), "", A)
# Rename the columns.
names(upstreamTemp) <- c(zoneField, variableName)
# Pull the variable specific factor
factor <- filter(conversionFactors, variable == variableName)%>%
select(factor)
# Account for missing factors
if(is.na(as.numeric(factor))) {
print(paste0("Factor missing for '", variableName, "'. Assigning a default factor of 1."))
factor <- 1
}
# Multiply the raw variable value by the conversion factor
upstreamTemp[,names(upstreamTemp) == variableName] <- upstreamTemp[,names(upstreamTemp) == variableName]*as.numeric(factor)
# Join to main dataframe
if( U == 1) {UpstreamStats <- upstreamTemp} else(UpstreamStats <- left_join(UpstreamStats, upstreamTemp, by = zoneField) )
}
# ===================
# Format for Database
# ===================
locLong <- melt(LocalStats,'FEATUREID')
locLong$zone <- "local"
upLong <- melt(UpstreamStats,'FEATUREID')
upLong$zone <- "upstream"
dbStats <- rbind(locLong, upLong)
# Names need to be all lower-case
names(dbStats) <- tolower(names(dbStats))
# make sure columns are correctly named and ordered
stopifnot(all(names(dbStats) == c('featureid', 'variable', 'value', 'zone')))
# Save the output as CSV
write.csv(dbStats,
file = file.path(baseDirectory, "versions", outputName, "completedStats", paste0("zonalStatsForDB_", outputName, bufferID, "_", Sys.Date(), ".csv")),
row.names = FALSE)
bufferID
catchmentsFilePath
rm(list=ls())
# Catchment Stats Generator
library(dplyr)
library(reshape2)
# ======
# Inputs
# ======
baseDirectory <- 'C:/KPONEIL/GitHub/projects/basinCharacteristics/zonalStatistics'
# There are 3 options for specifying the variables to output:
#   1) "ALL" will include all of the variables present in the folder
#   2) NULL will include the variables from the "rasterList" object in the "RB_INPUTS.txt" file
#   3) Manually list the variables to output (do not include the buffer specification)
outputVariables <- c("ALL")
# ========================
# Read user-defined inputs
# ========================
source( file.path(baseDirectory, "scripts", "RB_INPUTS.txt") )
# ==================
# Conversion Factors
# ==================
# Read the conversion factors file
setwd(baseDirectory); setwd('..')
conversionFactors <- read.csv("Covariate Data Status - High Res Delineation.csv")[,c("Name", "Conversion.Factor")]
# Rename columns
names(conversionFactors) <- c("variable", "factor")
# Include the bufferID
conversionFactors$variable <- paste0(conversionFactors$variable , "_", bufferID)
# ======================
# Group stats for output
# ======================
# Set the directory where the tables are located
rTablesDirectory <- file.path(baseDirectory, "versions", outputName, "rTables")
if(is.null(outputVariables)){outputVariables <- rasterList}
# Local
# -----
# Create list of variables to compile
if ( all(outputVariables %in% "ALL" == TRUE) ){
localStatFiles <- list.files(path = rTablesDirectory, pattern = paste0("^local_.*_", bufferID,".csv$"))
}else{
localStatFiles <- c()
outputVariables <- paste0(outputVariables, "_", bufferID)
for( LF in seq_along(outputVariables) ){
localStatFiles <- c(localStatFiles, list.files(path = rTablesDirectory, pattern = paste0("local_",outputVariables[LF] ) ) )
}
}
# Loop through files. Pull data and join together for output.
for ( L in seq_along(localStatFiles) ){
# Print status
print(L)
# Read the CSV
localTemp <- read.csv(file.path(rTablesDirectory, localStatFiles[L]) )
# Get file name
A <- gsub("*local_", "", localStatFiles[L])
variableName <- gsub(paste0("*.csv"), "", A)
# Rename the columns
names(localTemp) <- c(zoneField, variableName)
# Pull the variable specifc factor
factor <- filter(conversionFactors, variable == variableName)%>%
select(factor)
# Account for missing factors
if(is.na(as.numeric(factor))) {
print(paste0("Factor missing for '", variableName, "'. Assigning a default factor of 1."))
factor <- 1
}
# Multiply the raw variable value by the conversion factor
localTemp[,names(localTemp) == variableName] <- localTemp[,names(localTemp) == variableName]*as.numeric(factor)
# Join to main dataframe
if( L == 1) {LocalStats <- localTemp} else(LocalStats <- left_join(LocalStats, localTemp, by = zoneField) )
}
# Upstream
# --------
# Create list of variables to compile
if ( all(outputVariables %in% "ALL" == TRUE) ){
upstreamStatFiles <- list.files(path = rTablesDirectory, pattern = paste0("^upstream_.*_", bufferID,".csv$"))
}else{
upstreamStatFiles <- c()
for( UF in seq_along(outputVariables) ){
upstreamStatFiles <- c(upstreamStatFiles, list.files(path = rTablesDirectory, pattern = paste0("upstream_",outputVariables[UF] ) ) )
}
}
# Loop through files. Pull data and join together for output.
for ( U in 1:length(upstreamStatFiles) ){
# Print status
print(U)
# Read the CSV
upstreamTemp <- read.csv(file.path(rTablesDirectory, upstreamStatFiles[U]) )
# Get file name
A <- gsub("*upstream_", "", upstreamStatFiles[U])
variableName <- gsub(paste0("*.csv"), "", A)
# Rename the columns.
names(upstreamTemp) <- c(zoneField, variableName)
# Pull the variable specific factor
factor <- filter(conversionFactors, variable == variableName)%>%
select(factor)
# Account for missing factors
if(is.na(as.numeric(factor))) {
print(paste0("Factor missing for '", variableName, "'. Assigning a default factor of 1."))
factor <- 1
}
# Multiply the raw variable value by the conversion factor
upstreamTemp[,names(upstreamTemp) == variableName] <- upstreamTemp[,names(upstreamTemp) == variableName]*as.numeric(factor)
# Join to main dataframe
if( U == 1) {UpstreamStats <- upstreamTemp} else(UpstreamStats <- left_join(UpstreamStats, upstreamTemp, by = zoneField) )
}
# ===================
# Format for Database
# ===================
locLong <- melt(LocalStats,'FEATUREID')
locLong$zone <- "local"
upLong <- melt(UpstreamStats,'FEATUREID')
upLong$zone <- "upstream"
dbStats <- rbind(locLong, upLong)
# Names need to be all lower-case
names(dbStats) <- tolower(names(dbStats))
# make sure columns are correctly named and ordered
stopifnot(all(names(dbStats) == c('featureid', 'variable', 'value', 'zone')))
# Save the output as CSV
write.csv(dbStats,
file = file.path(baseDirectory, "versions", outputName, "completedStats", paste0("zonalStatsForDB_", outputName, bufferID, "_", Sys.Date(), ".csv")),
row.names = FALSE)
bufferID
rm(list=ls())
# Catchment Stats Generator
library(dplyr)
library(reshape2)
# ======
# Inputs
# ======
baseDirectory <- 'C:/KPONEIL/GitHub/projects/basinCharacteristics/zonalStatistics'
# There are 3 options for specifying the variables to output:
#   1) "ALL" will include all of the variables present in the folder
#   2) NULL will include the variables from the "rasterList" object in the "RB_INPUTS.txt" file
#   3) Manually list the variables to output (do not include the buffer specification)
outputVariables <- c("ALL")
# ========================
# Read user-defined inputs
# ========================
source( file.path(baseDirectory, "scripts", "RB_INPUTS.txt") )
# ==================
# Conversion Factors
# ==================
# Read the conversion factors file
setwd(baseDirectory); setwd('..')
conversionFactors <- read.csv("Covariate Data Status - High Res Delineation.csv")[,c("Name", "Conversion.Factor")]
# Rename columns
names(conversionFactors) <- c("variable", "factor")
# Include the bufferID
conversionFactors$variable <- paste0(conversionFactors$variable , "_", bufferID)
# ======================
# Group stats for output
# ======================
# Set the directory where the tables are located
rTablesDirectory <- file.path(baseDirectory, "versions", outputName, "rTables")
if(is.null(outputVariables)){outputVariables <- rasterList}
# Local
# -----
# Create list of variables to compile
if ( all(outputVariables %in% "ALL" == TRUE) ){
localStatFiles <- list.files(path = rTablesDirectory, pattern = paste0("^local_.*_", bufferID,".csv$"))
}else{
localStatFiles <- c()
outputVariables <- paste0(outputVariables, "_", bufferID)
for( LF in seq_along(outputVariables) ){
localStatFiles <- c(localStatFiles, list.files(path = rTablesDirectory, pattern = paste0("local_",outputVariables[LF] ) ) )
}
}
# Loop through files. Pull data and join together for output.
for ( L in seq_along(localStatFiles) ){
# Print status
print(L)
# Read the CSV
localTemp <- read.csv(file.path(rTablesDirectory, localStatFiles[L]) )
# Get file name
A <- gsub("*local_", "", localStatFiles[L])
variableName <- gsub(paste0("*.csv"), "", A)
# Rename the columns
names(localTemp) <- c(zoneField, variableName)
# Pull the variable specifc factor
factor <- filter(conversionFactors, variable == variableName)%>%
select(factor)
# Account for missing factors
if(is.na(as.numeric(factor))) {
print(paste0("Factor missing for '", variableName, "'. Assigning a default factor of 1."))
factor <- 1
}
# Multiply the raw variable value by the conversion factor
localTemp[,names(localTemp) == variableName] <- localTemp[,names(localTemp) == variableName]*as.numeric(factor)
# Join to main dataframe
if( L == 1) {LocalStats <- localTemp} else(LocalStats <- left_join(LocalStats, localTemp, by = zoneField) )
}
# Upstream
# --------
# Create list of variables to compile
if ( all(outputVariables %in% "ALL" == TRUE) ){
upstreamStatFiles <- list.files(path = rTablesDirectory, pattern = paste0("^upstream_.*_", bufferID,".csv$"))
}else{
upstreamStatFiles <- c()
for( UF in seq_along(outputVariables) ){
upstreamStatFiles <- c(upstreamStatFiles, list.files(path = rTablesDirectory, pattern = paste0("upstream_",outputVariables[UF] ) ) )
}
}
# Loop through files. Pull data and join together for output.
for ( U in 1:length(upstreamStatFiles) ){
# Print status
print(U)
# Read the CSV
upstreamTemp <- read.csv(file.path(rTablesDirectory, upstreamStatFiles[U]) )
# Get file name
A <- gsub("*upstream_", "", upstreamStatFiles[U])
variableName <- gsub(paste0("*.csv"), "", A)
# Rename the columns.
names(upstreamTemp) <- c(zoneField, variableName)
# Pull the variable specific factor
factor <- filter(conversionFactors, variable == variableName)%>%
select(factor)
# Account for missing factors
if(is.na(as.numeric(factor))) {
print(paste0("Factor missing for '", variableName, "'. Assigning a default factor of 1."))
factor <- 1
}
# Multiply the raw variable value by the conversion factor
upstreamTemp[,names(upstreamTemp) == variableName] <- upstreamTemp[,names(upstreamTemp) == variableName]*as.numeric(factor)
# Join to main dataframe
if( U == 1) {UpstreamStats <- upstreamTemp} else(UpstreamStats <- left_join(UpstreamStats, upstreamTemp, by = zoneField) )
}
# ===================
# Format for Database
# ===================
locLong <- melt(LocalStats,'FEATUREID')
locLong$zone <- "local"
upLong <- melt(UpstreamStats,'FEATUREID')
upLong$zone <- "upstream"
dbStats <- rbind(locLong, upLong)
# Names need to be all lower-case
names(dbStats) <- tolower(names(dbStats))
# make sure columns are correctly named and ordered
stopifnot(all(names(dbStats) == c('featureid', 'variable', 'value', 'zone')))
# Save the output as CSV
write.csv(dbStats,
file = file.path(baseDirectory, "versions", outputName, "completedStats", paste0("zonalStatsForDB_", outputName, bufferID, "_", Sys.Date(), ".csv")),
row.names = FALSE)
head(dbStats)
unique(dbStats$variable)
rm(list=ls())
baseDirectory <- 'C:/KPONEIL/GitHub/projects/basinCharacteristics/zonalStatistics'
source( file.path(baseDirectory, "scripts", "RB_INPUTS.txt") )
bufferID
?read.csv
rm(list=ls())
gc()
buff
buff = bufferIDs[1]
bufferIDs <- c("50ft", "100ft", "200ft")
buff = bufferIDs[1]
curTable <- read.csv(file = file.path(baseDirectory, "versions", outputName, "completedStats", paste0("zonalStatsForDB_", outputName, bufferID, "_", Sys.Date(), ".csv")))
baseDirectory <- 'C:/KPONEIL/GitHub/projects/basinCharacteristics/zonalStatistics'
curTable <- read.csv(file = file.path(baseDirectory, "versions", outputName, "completedStats", paste0("zonalStatsForDB_", outputName, bufferID, "_", Sys.Date(), ".csv")))
source( file.path(baseDirectory, "scripts", "RB_INPUTS.txt") )
curTable <- read.csv(file = file.path(baseDirectory, "versions", outputName, "completedStats", paste0("zonalStatsForDB_", outputName, bufferID, "_", Sys.Date(), ".csv")))
head(curTable)
dim(curTable)
covariates <- NULL
for (buff in bufferIDs){
# Save the output as CSV
curTable <- read.csv(file = file.path(baseDirectory, "versions", outputName, "completedStats", paste0("zonalStatsForDB_", outputName, bufferID, "_", Sys.Date(), ".csv")))
if( is.null(covariates) ){ covariates <- curTable } else( covariates <- rbind(covarites, curTable) )
}
covariates <- NULL
for (buff in bufferIDs){
print(paste0("Processing the covariates for the ", buff, " buffer."))
# Save the output as CSV
curTable <- read.csv(file = file.path(baseDirectory, "versions", outputName, "completedStats", paste0("zonalStatsForDB_", outputName, bufferID, "_", Sys.Date(), ".csv")))
if( is.null(covariates) ){ covariates <- curTable } else( covariates <- rbind(covariates, curTable) )
}
nombres <- unique(curTable$variable)
nombres
i = 1
vars[i]
write.csv
?write.csv
head(covariates)
dim(covariates)
unique(covariates$variable)
bufferIDs
library(dplyr)
test <- filter(curTable, variable = vars[i])%>%
select(value)%>%
mutate(range())
vars <- unique(curTable$variable)
test <- filter(curTable, variable = vars[i])%>%
select(value)%>%
mutate(range())
test <- filter(curTable, variable == vars[i])%>%
select(value)%>%
mutate(range())
test <- filter(curTable, variable == vars[i])%>%
select(value)
head(test)
test <- filter(curTable, variable == vars[i])%>%
mutate(range(value, na.rm = T))
test <- filter(curTable, variable == vars[i])%>%
mutate(range( na.rm = T))
test <- filter(curTable, variable == vars[i])
head(test)
dim(test)
mutate(test, range( value, na.rm = T))
range(test$value)
test <- filter(curTable, variable == vars[i])%>%
summarise(range())
test <- filter(curTable, variable == vars[i])%>%
summarise(range(value))
test <- filter(curTable, variable == vars[i])%>%
summarise(min(value))
test
test <- filter(curTable, variable == vars[i])%>%
summarise(max(value))
test
test <- filter(curTable, variable == vars[i])%>%
summarise(range(value))
test <- filter(curTable, variable == vars[i])%>%
mutate(range(value))
curVar <- filter(curTable, variable == vars[i])
curVar <- filter(curTable, variable == vars[i])%>%
select(value
)
head(curVar)
range(curVar, na.rm = T)
rm(list=ls())
library(dplyr)
# ======
# Inputs
# ======
baseDirectory <- 'C:/KPONEIL/GitHub/projects/basinCharacteristics/zonalStatistics'
bufferIDs <- c("50ft", "100ft", "200ft")
# ========================
# Read user-defined inputs
# ========================
source( file.path(baseDirectory, "scripts", "RB_INPUTS.txt") )
covariates <- NULL
for (buff in bufferIDs){
print(paste0("Processing the covariates for the ", buff, " buffer file."))
# Save the output as CSV
curTable <- read.csv(file = file.path(baseDirectory, "versions", outputName, "completedStats", paste0("zonalStatsForDB_", outputName, buff, "_", Sys.Date(), ".csv")))
vars <- unique(curTable$variable)
for ( i in seq_along(vars) ) {
curVar <- filter(curTable, variable == vars[i])%>%
select(value)
print(paste0("Range of variable ", vars[i], " is ", range(curVar, na.rm = T)))
}
if( is.null(covariates) ){ covariates <- curTable } else( covariates <- rbind(covariates, curTable) )
}
paste0(range(curVar, na.rm = T))
print(paste0("Range of variable ", vars[i], " is ", range(curVar, na.rm = T)[1], " to ", range(curVar, na.rm = T)[1]))
print(paste0("Range of variable ", vars[i], " is ", range(curVar, na.rm = T)[1], " to ", range(curVar, na.rm = T)[2]))
rm(list=ls())
library(dplyr)
# ======
# Inputs
# ======
baseDirectory <- 'C:/KPONEIL/GitHub/projects/basinCharacteristics/zonalStatistics'
bufferIDs <- c("50ft", "100ft", "200ft")
# ========================
# Read user-defined inputs
# ========================
source( file.path(baseDirectory, "scripts", "RB_INPUTS.txt") )
covariates <- NULL
for (buff in bufferIDs){
print(paste0("Processing the covariates for the ", buff, " buffer file."))
# Save the output as CSV
curTable <- read.csv(file = file.path(baseDirectory, "versions", outputName, "completedStats", paste0("zonalStatsForDB_", outputName, buff, "_", Sys.Date(), ".csv")))
vars <- unique(curTable$variable)
for ( i in seq_along(vars) ) {
curVar <- filter(curTable, variable == vars[i])%>%
select(value)
print(paste0("Range of variable ", vars[i], " is ", range(curVar, na.rm = T)[1], " to ", range(curVar, na.rm = T)[2]))
}
if( is.null(covariates) ){ covariates <- curTable } else( covariates <- rbind(covariates, curTable) )
}
a <- filter(covariates, variable == "impervious_50ft")
b <- filter(covariates, variable == "impervious_100ft")
c
C
C <- filter(covariates, variable == "impervious_200ft")
test <- left_join(a, b, by = "FEATUREID")
head(a)
test <- left_join(a, b, by = "featureid")
head(test)
a <- filter(covariates, variable == "impervious_50ft") %>% select(featureid, value)
b <- filter(covariates, variable == "impervious_100ft") %>% select(featureid, value)
C <- filter(covariates, variable == "impervious_200ft") %>% select(featureid, value)
test <- left_join(a, b, by = "featureid")
head(test)
test[1:100]
test[1:100,]
